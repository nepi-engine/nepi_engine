<launch>
  <arg name="global_ns" value="$(env ROOTNAME)" />
  <arg name="device_ns" value="$(env ROOTNAME)/$(env DEVICE_ID)" />
  <arg name="output_destination" value="screen" />
  <arg name="config_file_root" value="/opt/nepi/ros/etc" />
  <arg name="partition_layout_file" default="s2x_xavier_nx_nepi_partition_layout.yaml" />

  <!-- Args. to run or not run specific nodes -->
  <arg name="run_robot_state_publisher" default="false" />
  <arg name="run_web_utils" default="true" />

  <arg name="run_mgr_network" default="true" />
  <arg name="run_mgr_time_sync" default="true" />
  <arg name="run_mgr_nav_pose" default="true" />
  <arg name="run_gpsd_ros_client" default="false" />
  <arg name="run_mgr_ai_models" default="true" />
  <arg name="run_mgr_drivers" default="true" />
  <arg name="run_mgr_apps" default="true" />
  <arg name="run_mgr_automation" default="true" />

        
  <!-- Everything lives in the device namespace -->
  <group ns="$(arg device_ns)">


    <rosparam command="load" file="$(arg config_file_root)/nepi_managers/system_mgr.yaml" ns="system_mgr" />
    <!-- Partition layout depends on system type. Should be passed in from specialized launch file -->
    <rosparam command="load" file="$(arg config_file_root)/nepi_env/nepi_partitions/$(arg partition_layout_file)" ns="system_mgr" />
    <node name="system_mgr" pkg="nepi_managers" type="system_mgr.py" respawn="true" output="$(arg output_destination)" />

    <node name="config_mgr" pkg="nepi_managers" type="config_mgr.py" respawn="true" output="$(arg output_destination)" />

    <node if="$(arg run_robot_state_publisher)" name="nepi_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen" required="true" />


    <group if="$(arg run_web_utils)" >
      <!-- Rosbridge_websocket (for RUI or stand-alone)-->
      <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch" >
        <arg name="address" value="0.0.0.0"/>
        <arg name="port" value="9090"/>
        <!-- Use a long unregister_timeout as a work-around for the well-known unregister rospy bug -->
        <arg name="unregister_timeout" value="31536000"/>
      </include>

      <!-- Web Video Server (for RUI or stand-alone) -->
      <node name="web_video_server" pkg="web_video_server" type="web_video_server" output="$(arg output_destination)">
        <param name="port" value="9091"/>
      </node>
    </group>

    <!-- MGR:  Network -->
    <group if="$(arg run_mgr_network)" >
    <rosparam command="load" file="$(arg config_file_root)/nepi_managers/network_mgr.yaml" ns="network_mgr" />
    <node name="network_mgr" pkg="nepi_managers" type="network_mgr.py" respawn="true" output="$(arg output_destination)" />
    </group> 

    <!-- MGR:  Time Sync -->
    <group if="$(arg run_mgr_time_sync)" >
    <rosparam command="load" file="$(arg config_file_root)/nepi_managers/time_sync_mgr.yaml" ns="time_sync_mgr" />
    <node name="time_sync_mgr" pkg="nepi_managers" type="time_sync_mgr.py" respawn="false" output="$(arg output_destination)" />
    </group> 

    <!-- MGR:  Nav/Pose -->
    <group if="$(arg run_mgr_nav_pose)" >
      <!-- Nav/Pose Mgr -->
      <rosparam command="load" file="$(arg config_file_root)/nepi_managers/nav_pose_mgr.yaml" ns="nav_pose_mgr" />
      <node name="nav_pose_mgr" pkg="nepi_managers" type="nav_pose_mgr" respawn="false" output="$(arg output_destination)" />
      <rosparam command="load" file="$(arg config_file_root)/nepi_managers/ai_model_mgr.yaml" ns="nav_pose_mgr2" />
      <node name="nav_pose_mgr2" pkg="nepi_managers" type="nav_pose_mgr.py" respawn="false" output="$(arg output_destination)" />
    </group>      
    
 <!-- GPSD ROS Client -->
<group if="$(arg run_gpsd_ros_client)" >
      <rosparam command="load" file="$(arg config_file_root)/gpsd_ros_client/gpsd_ros_client.yaml" ns="gpsd_ros_client" />
      <node name="gpsd_ros_client" pkg="nepi_gpsd_ros_client" type="gpsd_ros_client_node" respawn="false" output="$(arg output_destination)" />
    </group>  
    
 <!-- MGR: AI Model Mgr -->
    <group if="$(arg run_mgr_ai_models)" >
      <rosparam command="load" file="$(arg config_file_root)/nepi_managers/ai_model_mgr.yaml" ns="ai_model_mgr" />
      <node name="ai_model_mgr" pkg="nepi_managers" type="ai_model_mgr.py" respawn="false" output="$(arg output_destination)" />
    </group>


   <!-- MGR: Drivers -->
    <group if="$(arg run_mgr_drivers)" >
      <rosparam command="load" file="$(arg config_file_root)/nepi_managers/drivers_mgr.yaml" ns="drivers_mgr" />
      <node name="drivers_mgr" pkg="nepi_managers" type="drivers_mgr.py" respawn="false" output="$(arg output_destination)" />
    </group>
    
   <!-- MGR: Apps -->
    <group if="$(arg run_mgr_apps)" >
      <rosparam command="load" file="$(arg config_file_root)/nepi_managers/apps_mgr.yaml" ns="apps_mgr" />
      <node name="apps_mgr" pkg="nepi_managers" type="apps_mgr.py" respawn="false" output="$(arg output_destination)" />
    </group>


       <!-- MGR: Automation -->
    <group if="$(arg run_mgr_automation)" >
      <rosparam command="load" file="$(arg config_file_root)/nepi_managers/automation_mgr.yaml" ns="automation_mgr" />
      <node name="automation_mgr" pkg="nepi_managers" type="automation_mgr.py" respawn="false" output="$(arg output_destination)" />
    </group>



  </group>

</launch>
